HOT 手册
HOT是新的模版形式，用来取代CFN（Heat CloudFoundation-compatible format), 本手
册讲 解释如何洗一个HOT模版，详细的规格说明需要参考

http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#hot-spec

1. 状态：

HOT的支持依然在开发中，围绕着提供所有CFN接口相同的功能，仍然有很多工作在做，
所以本手册也需要更新。

2. 写一个Hello world HOT模版 

这部分介绍如何写HOT模版，从一个非常基础的步骤开始

2.1 一个最基本的模版
我们能想到的最基础的模版，只包含一个资源定义，仅使用与定义的属性，比如说下面
的例子
heat_template_version: 2015-04-30

description: Simple template to deploy a single compute instance

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      key_name: my_key
      image: F18-x86_64-cfntools
      flavor: m1.small

每个HOT模版都需要包含一个heat_template_version的key，需要使用HOT识别的有效版
本，列表
http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#hot-spec-template-version

然后写一个描述，这个是可选的，包含一些有用的文本信息来描述模版，是一个很好的
习惯，如果描述内容超过一行，需要提供多行描述，yaml格式的例子如下：

description: >
  This is how you can provide a longer description
  of your template that goes over several lines.

resources部分是必须的,同时必须包含至少一个reource定义，上面的例子中，我们使用
了固定的值( ‘key_name’, ‘image’ 和 ‘flavor’ )来定义了一个虚拟久实例，
需要注意的一些元素，比如给定一个key-pair,映像（image),和实例类型(flovor)需要
事先在Openstack环境中存在。

一个模版的易用性更强的话，则需要定义个一套input参数，来替代固定的代码

2.2 模版的input参数
Input参数的定义是在HOT模版的parameter区段,可以参考参数部分
http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#hot-spec-parameters

参数允许用户在部署过程中定制一个模版，比如说，允许提供一个定制化的key－pair名
字，或者映像ID。 从模版作者的角度出发，这可以帮助一个模版的重用更简单，避免固
定代码假设带来的不便

还是以上面的例子为主，如果能允许用户提供定制的key－pair，提供自己的image，选
择可用的flavor，我们修改后的模版是这样的：

heat_template_version: 2015-04-30

description: Simple template to deploy a single compute instance

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for compute instance
  image_id:
    type: string
    label: Image ID
    description: Image to be used for compute instance
  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
在这个更新过的例子中，定义了三个Input参数，用户在部署的过程中需要提供。用来表
示资源定义个第三个参数用相应引用来替换了，这里也用到了内置的函数 get_param,
关于支持的函数参考：
http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#hot-spec-intrinsic-functions
我们也可以提供一个默认值，这样在用户没有提供输入的情况下，使用默认值，比如说：
parameters:
  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    default: m1.small

另外的一个选择，当用户被要求输入一组信息的时候，我们把输入给隐藏起来，这里用
到了hide属性，比如：

parameters:
  database_password:
    type: string
    label: Database Password
    description: Password to be used for database
    hidden: true

2.2.1 限制用户输入

当我们需要限制用户输入的时候，可以这么做
parameters:
  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    constraints:
      - allowed_values: [ m1.medium, m1.large, m1.xlarge ]
        description: Value must be one of m1.medium, m1.large or m1.xlarge.
更多参数限制参考
http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#hot-spec-parameters-constraints

限制部分，允许定义一组限制条件，再比如下面的例子用来清除的要求用户输入一个密码
的规则，

parameters:
  database_password:
    type: string
    label: Database Password
    description: Password to be used for database
    hidden: true
    constraints:
      - length: { min: 6, max: 8 }
        description: Password length must be between 6 and 8 characters.
      - allowed_pattern: "[a-zA-Z0-9]+"
        description: Password must consist of characters and numbers only.
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: Password must start with an uppercase character.


2.3 提供模版的outputs

作为补充，我们也希望能提供一些有用的输出给用户，这个可以通过ouputs部分来来解
决，详情：

http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#hot-spec-outputs

举个例子：
在上面的例子中定义的虚拟机的IP地址是可以访问到的，应该提供给用户。 否则用户需
要自己去查找，下例
outputs:
  instance_ip:
    description: The IP address of the deployed instance
    value: { get_attr: [my_instance, first_address] }


HOT 模版集合

https://github.com/openstack/heat-templates/tree/master/hot

包含了各种实用的例子




========================
cloudinit 脚本研究


========================
softwaredeployment脚本研究

Link: http://docs.openstack.org/developer/heat/template_guide/software_deployment.html

配置软件有很多选择：
1. 定制创建的映像（Image）
2. 使用cloud-init和user-data启动脚本
3. 使用Software Deployment资源

今天先研究第三项，通过只用Software Deployment资源
不过首先来看下Software config 资源：


启动配置脚本可以有自身的资源来管理。 这样，可以依稀定义配置，之后运行多个Server
实例，这些software－config资源通过调用API来提取和保存。 寻该已有的software-config
资源的内容是不太可能的，所以stack-update会改变已经存在的software－conf资源，
从而导致API调用去创建新的config，并删除旧有的

资源OS::Heat::SoftwareConfig 被用来保存文本信息显示的配置，比如：
 resources:
    boot_script:
      type: OS::Heat::SoftwareConfig
      properties:
        group: ungrouped
        config: |
          #!/bin/bash
          echo "Running boot script"
          # ...

    server_with_boot_script:
      type: OS::Nova::Server
      properties:
        # flavor, image etc
        user_data_format: RAW
        user_data: {get_resource: boot_script}

资源OS::Heat::SoftwareConfig允许Cloud-init的cloud-config，来表示一个模版的yaml，
而不是用一大块字符串， 从而我们可以在构建cloud-confi的时候使用内置函数（intrinsic
functions），同样必须确认cloud-config使用了有效的YAML，

  parameters:
    file_content:
      type: string
      description: The contents of the file /tmp/file

  resources:
    boot_config:
      type: OS::Heat::CloudConfig
      properties:
        cloud_config:
          write_files:
          - path: /tmp/file
            content: {get_param: file_content}

    server_with_cloud_config:
      type: OS::Nova::Server
      properties:
        # flavor, image etc
        user_data_format: RAW
        user_data: {get_resource: boot_config}

资源 OS::Heat::MultipartMime允许多个 OS::Heat::SoftwareConfig和 OS::Heat::CloudConfig
资源组合成一个cloud-init:

  parameters:
    file_content:
      type: string
      description: The contents of the file /tmp/file

    other_config:
      type: string
      description: The ID of a software-config resource created elsewhere

  resources:
    boot_config:
      type: OS::Heat::CloudConfig
      properties:
        cloud_config:
          write_files:
          - path: /tmp/file
            content: {get_param: file_content}

    boot_script:
      type: OS::Heat::SoftwareConfig
      properties:
        group: ungrouped
        config: |
          #!/bin/bash
          echo "Running boot script"
          # ...

    server_init:
      type: OS::Heat::MultipartMime
      properties:
        parts:
        - config: {get_resource: boot_config}
        - config: {get_resource: boot_script}
        - config: {get_param: other_config}

    server:
      type: OS::Nova::Server
      properties:
        # flavor, image etc
        user_data_format: RAW
        user_data: {get_resource: server_init}

继续来看Software deployment资源：

有很多种情形是这样的，在有一个配置改变的情况下，不需要替换掉一个或者一组服务
器。OS::Heat::SoftwareDeployment 允许任意的软件配置修改，比如从一个服务器从添加
或者移除软件配置

如何为software deployment构建一个定制的映像

OS::Heat::SoftwareConfig资源涌来保存软件配置，OS::Heat::SoftwareDeployment资
源可以用来关联一个配置资源到一个服务器， OS::Heat::SoftwareConfig 资源的group属
性置顶了哪些工具可以来使用这些配置

OS::Heat::SoftwareConfig 有能力定义个inputs的的样式（或者叫模式），inputs被
映射到软件配置工具需要的变量或者参数

同样的,outputs也可以被影射，从来在配置过后倒出结构化数据。，对于哪些不支持这
样的工具，outputs会被写进一个路径已知的文件，用来被后续hook后读取

 OS::Heat::SoftwareDeployment资源给配置的input进行赋值，资源保持状态在一个
IN_PROGRESS状态，直到服务器给HEAT发出信号，配置脚本的output已经产生完毕。

定制映像脚本
下面的例子需要虚拟机使用定制的映像来启动，下面的脚本使用的是diskimage-builder
来创建的映像：
# Clone the required repositories. Some of these are also available
  # via pypi or as distro packages.
  git clone https://git.openstack.org/openstack/diskimage-builder.git
  git clone https://git.openstack.org/openstack/tripleo-image-elements.git
  git clone https://git.openstack.org/openstack/heat-templates.git

  # Required by diskimage-builder to discover element collections
  export ELEMENTS_PATH=tripleo-image-elements/elements:heat-templates/hot/software-config/elements

  # The base operating system element(s) provided by the diskimage-builder
  # elements collection. Other values which may work include:
  # centos7, debian, opensuse, rhel, rhel7, or ubuntu
  export BASE_ELEMENTS="fedora selinux-permissive"
  # Install and configure the os-collect-config agent to poll the heat service
  # for configuration changes to execute
  export AGENT_ELEMENTS="os-collect-config os-refresh-config os-apply-config"


  # heat-config installs an os-refresh-config script which will invoke the
  # appropriate hook to perform configuration. The element heat-config-script
  # installs a hook to perform configuration with shell scripts
  export DEPLOYMENT_BASE_ELEMENTS="heat-config heat-config-script"

  # Install a hook for any other chosen configuration tool(s).
  # Elements which install hooks include:
  # heat-config-cfn-init, heat-config-puppet, or heat-config-salt
  export DEPLOYMENT_TOOL=""

  # The name of the qcow2 image to create, and the name of the image
  # uploaded to the OpenStack image registry.
  export IMAGE_NAME=fedora-software-config

  # Create the image
  diskimage-builder/bin/disk-image-create vm $BASE_ELEMENTS $AGENT_ELEMENTS \
       $DEPLOYMENT_BASE_ELEMENTS $DEPLOYMENT_TOOL -o $IMAGE_NAME.qcow2

  # Upload the image, assuming valid credentials are already sourced
  glance image-create --disk-format qcow2 --container-format bare \
      --name $IMAGE_NAME < $IMAGE_NAME.qcow2


使用脚本配置
上面的脚本意境包含了heat-config-script的元素，所以内置的映像已经又能使用shell脚
本进行配置了,Config inputs被影射成shell的环境变量，脚本通过写heat_outputs_path.output
名字可以与heat之间通信outputs,下面的例子通过写入foo，bar，产生output结果

  resources:
    config:
      type: OS::Heat::SoftwareConfig
      properties:
        group: script
        inputs:
        - name: foo
        - name: bar
        outputs:
        - name: result
        config: |
          #!/bin/sh -x
          echo "Writing to /tmp/$bar"
          echo $foo > /tmp/$bar
          echo -n "The file /tmp/$bar contains `cat /tmp/$bar` for server $deploy_server_id during $deploy_action" > $heat_outputs_path.result
          echo "Written to /tmp/$bar"
          echo "Output to stderr" 1>&2

    deployment:
      type: OS::Heat::SoftwareDeployment
      properties:
        config:
          get_resource: config
        server:
          get_resource: server
        input_values:
          foo: fooooo
          bar: baaaaa

    server:
      type: OS::Nova::Server
      properties:
        # flavor, image etc
        user_data_format: SOFTWARE_CONFIG

  outputs:
    result:
      value:
        get_attr: [deployment, result]
    stdout:
      value:
        get_attr: [deployment, deploy_stdout]
    stderr:
      value:
        get_attr: [deployment, deploy_stderr]
    status_code:
      value:
        get_attr: [deployment, deploy_status_code]








