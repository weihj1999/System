Openstack中的Policy调研

每个Openstack的服务, 包括Keystone, Compute, Networking等等, 都有各自一套
自己的基于role的的访问控制策略, 通过定义在各自服务的policy.json文件定义,
它们决定了用户可以访问哪些对象.

任何时候一个Openstack服务发起一个API调用的时候,服务的Policy引擎(Engine)
会使用相应的策略（Policy）定义来决定这个调用能否被接受．任何对Policy.json
的修改都回立刻生效,也就是说在服务运行的时候允许新的策略生效.

policy.json文件是JSON格式的,有"<target>" : "<rule>"的单行格式声明.

Target,也叫行为,表示API调用要做什么.比如说是启动一个虚拟机,还是给虚拟机
挂载一个存储卷之类的.

行为的名字通常是预保留的或者叫预定义的(qualified),比如说.Openstack的
Compute的功能API调用列举所有的实例,存储卷和网络,在/etc/nova/policy.json
这些APIs被相应的表示为
compute:get_all, 
volume:get_all,
network:get_all

API调用和行为之间的对应关系通常没有文档记录.


策略的规则（role）决定了在哪些情况（circumstances）下API的调用是被允许
的。通常这里涉及到了发起调用的用户（称为API用户），和API调用要操作的对
象。 一个典型的规则检查一个API用户是否是一个对象的Owner

修改策略：
很多编辑policy.json的方法在各种blog上都有描述，但是对它的直接编辑会带来
不可预知的影响，所以不太鼓励这种行为



1. 例子

一个简单的规则看起来像这样

"compute:get_all" : ""

目标(target)是 "compute:get_all", 列举所有虚拟机实例的Compute服务的API，
规则（rule）是一个空的字符创，意味着“always”，这个策略允许任何人来查看
虚拟机实例。
我们可以拒绝使用一个API的权限

"compute:shelve": "!"

惊叹号代表了“never”或者“nobody”，用来禁用Compute服务的API

you xuduo  API只能由Admin用户来调用，这个可以用来下面的规则表示

"role:admin". 

下面的策略保证了只有管理员在Identity数据库创建新的用户

"identity:create_user" : "role:admin"

我们可以把API的使用局限于任何Role，比如说Orchestration服务定义了一个叫做
heat_stack_usr的role， 任何有了这个角色的用户都不允许创建stack

"stacks:create": "not role:heat_stack_user"

这个规则使用了布尔操作符 not。 更多的复杂的规则都可以使用操作符来构建，
比如说and, or和圆括号（parentheses）

我们也可以定一个规则的别名：

"deny_stack_user": "not role:heat_stack_user"

策略引擎（Engige）理解"deny_stack_user"，不是一个API，因此把它翻译为一
个别名， 

The policy engine understands that "deny_stack_user" is not an API and 
consequently， 上面的创建stack的策略可以改写为：

"stacks:create": "rule:deny_stack_user"

上面这些全部照搬于/etc/heat/policy.json.

规则可以比较API的属性和对象的属性，比如说

"compute:start" : "user_id:%(user_id)s"

这里表示，只有一个虚拟机实例的owner才可以启动虚拟机，分号前的user_id是一
个API属性，也就是一个API用的的用户ID，它被用来和对象的用户ID进行对比，这
个例子里面，对象是一个虚拟机实例。再准确一点，他和数据库里面对象的user_id
字段进行比较。如果两个值相同，则准予操作。

一个admin用被运行调用所有的API，下面的/etc/keystone/policy.json清晰的描
述了这些

"admin_required": "role:admin or is_admin:1",
"owner" : "user_id:%(user_id)s",
"admin_or_owner": "rule:admin_required or rule:owner",
"identity:change_password": "rule:admin_or_owner"

第一个行为"user is an admin user"定义了一个别名，is_admin标致只在第一次
配置Identtity服务的时候使用， 它表明了用户具有通过了service Token认证的
admin权限

第二行为"user owns the object"创建了一个别名，通过比较API的用户ID和对象
的用户ID

第三行定义了一个别名admin_or_owner，它使用or操作符组合了两个别名

第四行配置了一个策略，一个密码只能被它的owner或者admin用户修改。

作为最后一个例子，我们检查一个更复杂的规则：

"identity:ec2_delete_credential": "rule:admin_required or
             (rule:owner and user_id:%(target.credential.user_id)s)"

这个规则对丁了谁能使用Ientity API "delete EC2 credential",这里，布尔
操作符和圆括号组合了三个稍微简单的规则。
admin_required 和 owner 使用前面例子中相同的别名，
user_id:%(target.credential.user_id)s 比较API用户和target相关联的认证
对象的user_id

2. 语法

A policy.json file 由策略 和格式为target:rule or alias:definition的别
名组成, 用逗号区分，使用大括号围住：

{
"alias 1" : "definition 1",
"alias 2" : "definition 2",
...
"target 1" : "rule 1",
"target 2" : "rule 2",
....
}

Targets 是APIs， 写成格式"service:API" 或者简单的写成 "API". 
例如：
"compute:create" 或者 "add_image".

Rules 决定了API调用是否被允许

规则可以是如下:

1. always true. 动作永远被允许， 这个可以写成空字符串""， []，或者"@" 
2. always false 动作永远不被允许， 写作 "!".
3. 一个特殊检查 a special check
4. 两个值对比较
5. 基于简单规则的布尔表达式
特殊检查包括Special checks are
1. <role>:<role name>, 测试API是否包含这个role
2. <rule>:<rule name>, 一个别名的定义.
3. http:<target URL>, 委派检查一个远程的服务器, 当服务器返回True之后API
认证通过

开发人员可以定义额外的检查,2个值做对比可以按照如下进行:
"value1 : value2"


可能的值可以是: 
1. 包含字符串,数字, true,false
2. API属性
3. target的对象属性 
4. is_admin标签


API 属性可以是 can be project_id, user_id or domain_id.
Target对象的可以使对象在数据库中描述的字段,举例来说,API "compute:start" 
,对象是将要启动的虚拟机实例,启动虚拟机的策略可以使用%(project_id)s属性,
也就是这个虚拟机所在的项目. 通常可以看得出来这是个字符串.

is_admin 表明管理权的权限授予,使通过admin的token机制(keystone命令使用时的
--os-token),admin token 允许在admin的role存在之前初始化identity数据库

别名的构建,为了方便起见,一个别名是一个缩写的短名
和定义策略的方法是一样的. 

alias name : alias definition

一旦一个别名定义完毕,在一个策略的规则里面就可以使用它了










