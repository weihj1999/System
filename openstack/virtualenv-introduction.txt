

Virtualenv

Introduction

virtualenv is a tool to create isolated Python environments.

The basic problem being addressed is one of dependencies and versions, and indirectly 
permissions. Imagine you have an application that needs version 1 of LibFoo, but 
another application requires version 2. How can you use both these applications? If 
you install everything into /usr/lib/python2.7/site-packages (or whatever your 
platform’s standard location is), it’s easy to end up in a situation where you 
unintentionally upgrade an application that shouldn’t be upgraded.

Or more generally, what if you want to install an application and leave it be? If an 
application works, any change in its libraries or the versions of those libraries 
can break the application.

Also, what if you can’t install packages into the global site-packages directory? For 
instance, on a shared host.

In all these cases, virtualenv can help you. It creates an environment that has its 
own installation directories, that doesn’t share libraries with other virtualenv 
environments (and optionally doesn’t access the globally installed libraries either).

Installation

Warning:
1. We advise installing virtualenv-1.9 or greater. Prior to version 1.9, the pip 
included in virtualenv did not download from PyPI over SSL
2. When using pip to install virtualenv, we advise using pip 1.3 or greater. Prior 
to version 1.3, pip did not download from PyPI over SSL.
3. We advise against using easy_install to install virtualenv when using setuptools 
< 0.9.7, because easy_install didn’t download from PyPI over SSL and was broken in 
some subtle ways.

To install globally with pip
$ [sudo] pip install virtualenv

Or to get the latest unreleased dev version:

$ [sudo] pip install https://github.com/pypa/virtualenv/tarball/develop

To install version X.X globally from source:

$ curl -O https://pypi.python.org/packages/source/v/virtualenv/virtualenv-X.X.tar.gz
$ tar xvfz virtualenv-X.X.tar.gz
$ cd virtualenv-X.X
$ [sudo] python setup.py install
o use locally from source:

$ curl -O https://pypi.python.org/packages/source/v/virtualenv/virtualenv-X.X.tar.gz
$ tar xvfz virtualenv-X.X.tar.gz
$ cd virtualenv-X.X

To use locally from source:

$ curl -O https://pypi.python.org/packages/source/v/virtualenv/virtualenv-X.X.tar.gz
$ tar xvfz virtualenv-X.X.tar.gz
$ cd virtualenv-X.X
$ python virtualenv.py myVE

User Guide

Usage
Virtualenv has one basic command:

$ virtualenv ENV

Where ENV is a directory to place the new virtual environment. It has a number of usual 
effects (modifiable by many Options):

1. ENV/lib/ and ENV/include/ are created, containing supporting library files for a new 
virtualenv python. Packages installed in this environment will live under 
ENV/lib/pythonX.X/site-packages/.
2. ENV/bin is created, where executables live - noticeably a new python. Thus running a 
script with #! /path/to/ENV/bin/python would run that script under this virtualenv’s python.
3. The crucial packages pip and setuptools are installed, which allow other packages to 
be easily installed to the environment. This associated pip can be run from ENV/bin/pip.

The python in your new virtualenv is effectively isolated from the python that was used 
to create it.

activate script
In a newly created virtualenv there will also be a activate shell script. For Windows 
systems, activation scripts are provided for the Command Prompt and Powershell.

On Posix systems, this resides in /ENV/bin/, so you can run:

$ source bin/activate
For some shells (e.g. the original Bourne Shell) you may need to use the . command, when 
source does not exist. There are also separate activate files for some other shells, 
like csh and fish. bin/activate should work for bash/zsh/dash.

This will change your $PATH so its first entry is the virtualenv’s bin/ directory. (You 
have to use source because it changes your shell environment in-place.) This is all it 
does; it’s purely a convenience. If you directly run a script or the python interpreter 
from the virtualenv’s bin/ directory (e.g. path/to/ENV/bin/pip or /path/to/ENV/bin/python-script.py) 
there’s no need for activation.

The activate script will also modify your shell prompt to indicate which environment is 
currently active. To disable this behaviour, see VIRTUAL_ENV_DISABLE_PROMPT.

To undo these changes to your path (and prompt), just run:

$ deactivate
On Windows, the equivalent activate script is in the Scripts folder:

> \path\to\env\Scripts\activate
And type deactivate to undo the changes.

Based on your active shell (CMD.exe or Powershell.exe), Windows will use either activate.bat 
or activate.ps1 (as appropriate) to activate the virtual environment. If using Powershell, 
see the notes about code signing below.

Removing an Environment
Removing a virtual environment is simply done by deactivating it and deleting the environment 
folder with all its contents:

(ENV)$ deactivate
$ rm -r /path/to/ENV

The --system-site-packages Option
If you build with virtualenv --system-site-packages ENV, your virtual environment will 
inherit packages from /usr/lib/python2.7/site-packages (or wherever your global 
site-packages directory is).

This can be used if you have control over the global site-packages directory, and you want 
to depend on the packages there. If you want isolation from the global system, do not use 
this flag.

Using Virtualenv without bin/python
Sometimes you can’t or don’t want to use the Python interpreter created by the virtualenv. 
For instance, in a mod_python or mod_wsgi environment, there is only one interpreter.

Luckily, it’s easy. You must use the custom Python interpreter to install libraries. But 
to use libraries, you just have to be sure the path is correct. A script is available to 
correct the path. You can setup the environment like:

activate_this = '/path/to/env/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this))

This will change sys.path and even change sys.prefix, but also allow you to use an existing 
interpreter. Items in your environment will show up first on sys.path, before global items. 
However, global items will always be accessible (as if the --system-site-packages flag had 
been used in creating the environment, whether it was or not). Also, this cannot undo the 
activation of other environments, or modules that have been imported. You shouldn’t try to, 
for instance, activate an environment before a web request; you should activate one environment 
as early as possible, and not do it again in that process.

Making Environments Relocatable

Note: this option is somewhat experimental, and there are probably caveats that have not 
yet been identified.

The --relocatable option currently has a number of issues, and is not guaranteed to work 
in all circumstances. It is possible that the option will be deprecated in a future 
version of virtualenv

The --extra-search-dir option

This option allows you to provide your own versions of setuptools and/or pip to use instead 
of the embedded versions that come with virtualenv.

To use this feature, pass one or more --extra-search-dir options to virtualenv like this:

$ virtualenv --extra-search-dir=/path/to/distributions ENV
The /path/to/distributions path should point to a directory that contains setuptools 
and/or pip wheels.

virtualenv will look for wheels in the specified directories, but will use pip’s standard 
algorithm for selecting the wheel to install, which looks for the latest compatible wheel.

As well as the extra directories, the search order includes:

1. The virtualenv_support directory relative to virtualenv.py
2. The directory where virtualenv.py is located.
3. The current directory.

Reference:
To be continued @ https://virtualenv.pypa.io/en/stable/reference/




